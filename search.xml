<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>203.移除链表元素</title>
      <link href="/posts/10614.html"/>
      <url>/posts/10614.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/posts/10614/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221222175350.png"></p><h2 id="我的代码"><a href="#我的代码" class="headerlink" title="我的代码"></a>我的代码</h2><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode removeElements(ListNode head, int val) &#123;</span><br><span class="line">        ListNode mid = new ListNode();</span><br><span class="line">        if(head == null)&#123;//似乎多余？？？</span><br><span class="line">            return head;</span><br><span class="line">        &#125;</span><br><span class="line">        while(head.val == val &amp;&amp; head != null)&#123;</span><br><span class="line">            head = head.next;//转移头节点</span><br><span class="line">            if(head == null)&#123;</span><br><span class="line">                return head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mid = head;</span><br><span class="line">        while(mid.next != null)&#123;</span><br><span class="line">            if(mid.next.val == val)&#123;</span><br><span class="line">                mid.next = mid.next.next;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            mid = mid.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缝缝补补做出</p><p>关键在第一个节点的操作上，因为我们删除一个节点是对这个节点的上一个节点进行操作</p><p>ps</p><p>1.如果节点头为空，直接返回</p><p>2.在第一节点特判时，如果为空，直接返回</p><p>3.创建中间变量对中间变量进行操作保证头节点一直是头节点</p><p>4.中间变量只是引用数据类型，会改变实际的值，但是head不变就可以</p><h2 id="大佬的思路——虚拟头节点"><a href="#大佬的思路——虚拟头节点" class="headerlink" title="大佬的思路——虚拟头节点"></a>大佬的思路——虚拟头节点</h2><p><strong>优势</strong>：在一般操作的情况下，我们删除或者增添节点的时候对头节点和其他节点的操作不同，如果使用头节点，那么我们可以使增删头节点的方式与其他节点相同，起到统一操作的作用</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode removeElements(ListNode head, int val) &#123;</span><br><span class="line">    //重要操作</span><br><span class="line">        ListNode dummyHead = new ListNode();</span><br><span class="line">        dummyHead.next = head;</span><br><span class="line">        ListNode cur = dummyHead;</span><br><span class="line">        while(cur.next != null)&#123;</span><br><span class="line">            if(cur.next.val == val)&#123;</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps:</p><p>不能返回原来的头节点，因为可能已经被删除（这里应该具体研究一下），<strong>返回cur.next</strong></p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>让所有值不等于val的节点连接成一个新的节点</p><p>有点考逻辑，但是如果用一句话来形容的话——我来组成下一个节点，感觉像拼火车？？？</p><p>这个程序给我的感觉是先全部展开，再依次收拢</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">    public ListNode removeElements(ListNode head, int val) &#123;</span><br><span class="line">        if(head==null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        head.next=removeElements(head.next,val);//</span><br><span class="line">        if(head.val==val)&#123;//特判头节点，返回的值一定为head,只不过主体部分已经修改完毕，不对</span><br><span class="line">        //判断当前节点的值是否等于val，如果是返回下一个节点，否则返回当前节点</span><br><span class="line">            return head.next;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return head;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表</title>
      <link href="/posts/54862.html"/>
      <url>/posts/54862.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="线性表的顺序储存结构"><a href="#线性表的顺序储存结构" class="headerlink" title="线性表的顺序储存结构"></a>线性表的顺序储存结构</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><p>​<img src="/posts/54862/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221222165127.png"></p><p>元素之间有序，不存在空位，第一个元素无前驱，最后一个元素无后继，其他每个元素有且只有一个前驱和后记，并且有限</p><h3 id="关键操作"><a href="#关键操作" class="headerlink" title="关键操作"></a>关键操作</h3><p><strong>赋值&amp;&amp;扩容</strong></p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void InitList(int data) &#123;//给线性表从0开始依次赋值</span><br><span class="line">    if(size==L.length)&#123;//如果满容，进行扩容</span><br><span class="line">        this.L= Arrays.copyOf(this.L,this.L.length*2);</span><br><span class="line">    &#125;</span><br><span class="line">    L[size++]=data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入元素，删除元素</strong></p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void remove(int key) &#123;//删除链表中的某个值</span><br><span class="line">    int index=this.search(key);</span><br><span class="line">    if(index==-1)&#123;</span><br><span class="line">        System.out.println(&quot;没找到要删除的数字&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=index;i&lt;size-1;i++)&#123;//将pos之后的元素集体左移</span><br><span class="line">        this.L[i]=this.L[i+1];</span><br><span class="line">    &#125;</span><br><span class="line">    this.size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void add(int pos, int data) &#123;//插入元素</span><br><span class="line">    if(pos&lt;0||pos&gt;=size)&#123;//如果插入坐标不在线性表坐标之内，抛出异常</span><br><span class="line">        System.out.println(&quot;坐标不合法&quot;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int i=size-1;i&gt;pos;i--)&#123;//坐标合法，将pos之后的（包括pos）元素右移，然后给pos位置的元素赋值</span><br><span class="line">            L[i]=L[i-1];</span><br><span class="line">        &#125;</span><br><span class="line">        L[pos]=data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong>优</strong></p><p>无需为元素之间的逻辑关系额外增加储存空间</p><p>科快速存取任意位置的表中元素</p><p><strong>缺</strong></p><p>插入和删除操作需要移动大量元素</p><p>容易造成储存空间的”碎片“</p><h3 id="完整实现"><a href="#完整实现" class="headerlink" title="完整实现"></a>完整实现</h3><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package List.shunxulist;</span><br><span class="line"></span><br><span class="line">import java.util.Arrays;</span><br><span class="line"></span><br><span class="line">public class MyArrylist implements SeqList&#123;</span><br><span class="line">    public int L[];</span><br><span class="line">    private int size;</span><br><span class="line"></span><br><span class="line">    public MyArrylist()&#123;//构造函数，先构造一个长度为10的数组，如果长度不够，可以扩容</span><br><span class="line">        this.L=new int[10];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void display() &#123;//打印线性表中的所有元素</span><br><span class="line">        for(int i=0;i&lt;size;i++)&#123;</span><br><span class="line">            System.out.print(L[i]+&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void InitList(int data) &#123;//给线性表从0开始依次赋值</span><br><span class="line">        if(size==L.length)&#123;//如果满容，进行扩容</span><br><span class="line">            this.L= Arrays.copyOf(this.L,this.L.length*2);</span><br><span class="line">        &#125;</span><br><span class="line">        L[size++]=data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void add(int pos, int data) &#123;//插入元素</span><br><span class="line">        if(pos&lt;0||pos&gt;=size)&#123;//如果插入坐标不在线性表坐标之内，抛出异常</span><br><span class="line">            System.out.println(&quot;坐标不合法&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            for(int i=size-1;i&gt;pos;i--)&#123;//坐标合法，将pos之后的（包括pos）元素右移，然后给pos位置的元素赋值</span><br><span class="line">                L[i]=L[i-1];</span><br><span class="line">            &#125;</span><br><span class="line">            L[pos]=data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean contains(int toFind) &#123;//查找是否含有某个元素</span><br><span class="line">        for(int i=0;i&lt;this.size;i++)&#123;</span><br><span class="line">            if(toFind==L[i])&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int search(int toFind) &#123;//查找某个对应元素的坐标</span><br><span class="line">        for(int i=0;i&lt;this.size;i++)&#123;</span><br><span class="line">            if(toFind==L[i])&#123;</span><br><span class="line">                return i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getPos(int pos) &#123;//查找某个坐标上的值</span><br><span class="line">        if(pos&lt;0||pos&gt;=size)&#123;</span><br><span class="line">            System.out.println(&quot;数组下标错误&quot;);</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        return this.L[pos];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void stePos(int pos, int value) &#123;//将某个位置的值替换为某个值</span><br><span class="line">        if(pos&lt;0||pos&gt;=size)&#123;</span><br><span class="line">            System.out.println(&quot;数组下标错误&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        this.L[pos] = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void remove(int key) &#123;//删除链表中的某个值</span><br><span class="line">        int index=this.search(key);</span><br><span class="line">        if(index==-1)&#123;</span><br><span class="line">            System.out.println(&quot;没找到要删除的数字&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        for(int i=index;i&lt;size-1;i++)&#123;//将pos之后的元素集体左移</span><br><span class="line">            this.L[i]=this.L[i+1];</span><br><span class="line">        &#125;</span><br><span class="line">        this.size--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int size() &#123;//获取链表长度</span><br><span class="line">        return this.size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void clear() &#123;//重置链表</span><br><span class="line">        this.size=0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线性表的链式储存结构"><a href="#线性表的链式储存结构" class="headerlink" title="线性表的链式储存结构"></a>线性表的链式储存结构</h2><p><img src="/posts/54862/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221222170215.png"></p><p>在链式储存中，每个元素除了储存该元素本身的信息之外，还需储存下一个元素的地址</p><h3 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h3><p>头指针：链表中第一个节点的存储位置</p><p>头结点：单链表的第一个节点前附设一个结点，可不储存任何信息，头节点的指针域指向第一个节点的指针</p><p>ps:</p><p>1.头指针</p><p>头指针是指向链表的第一个节点的指针，若链表有头节点，则是指向头节点的指针</p><p>头指针具有表示作用，常用链表的名字作为头指针的名字</p><p>无论链表是否为空，头指针均不为空，头指针是链表的必要元素</p><p>2.头节点</p><p>存在头节点时，对第一元素节点前插入节点和删除第一节点与其他操作就统一了</p><p>头节点不一定是链表的必要元素</p><h3 id="关键操作-1"><a href="#关键操作-1" class="headerlink" title="关键操作"></a>关键操作</h3><p>&#96;&#96;</p><p>添加</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//头插法</span><br><span class="line">public void addFirst(int data)&#123;</span><br><span class="line">    Node node = new Node(data);//创建新节点</span><br><span class="line">    //注意理解我们这里是在什么对象的角度去进行操作的</span><br><span class="line">    if(this.head==null)&#123;//如果第一个节点是空的，复制给第一个节点</span><br><span class="line">        this.head = node;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        //如果第一个节点不空，执行标准化操作</span><br><span class="line">        node.next = this.head;//新节点的指针域指向旧节点</span><br><span class="line">        this.head = node;//现在我们是下一个操作对象的新节点</span><br><span class="line">    &#125;</span><br><span class="line">    //跟C的思路好像有点不同</span><br><span class="line">    //开始回忆，C是创建新节点，把新节点的指针域赋值为旧节点的指针域（换屁股），然后把就节点的指针域赋值为当前节点（头插进屁股里）</span><br><span class="line">    this.usedSize++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>//为了节约时间直接把尾插法写在这里//这个尾插法不存粹，不够快，好处是可以跟这个头插法的代码一起用//原理是从第一个遍历到最后一个，然后再插入，比起存粹的尾插速度要慢很多，在数据大的时候public void addLast(int data)&#123;    //创建新节点    Node node = new Node(data);    if(this.head == null)&#123;        this.head = node;    &#125;else&#123;        Node cur = this.head;        while(cur.next!=null)&#123;            cur = cur.next;        &#125;        cur.next = node;    &#125;    this.usedSize++;&#125;`</code></pre><p>&#96;&#96;</p><p>插入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void addLast(int data)&#123;</span><br><span class="line">    //创建新节点</span><br><span class="line">    Node node = new Node(data);</span><br><span class="line">    if(this.head == null)&#123;</span><br><span class="line">        this.head = node;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Node cur = this.head;</span><br><span class="line">        while(cur.next!=null)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    this.usedSize++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package List.lianshilist;</span><br><span class="line"></span><br><span class="line">public class Node &#123;</span><br><span class="line">    public int value;//储存数据</span><br><span class="line">    public Node next;//-&gt;next，储存下一个节点的地址</span><br><span class="line"></span><br><span class="line">    public Node (int value)&#123;</span><br><span class="line">        this.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package List.lianshilist;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* 这个对象只用创建一次，为链表中的第一个元素，头指针为这个对象的对象名</span><br><span class="line">* 之后不断往里面添加节点类就可以，头节点不变（头插法的话）</span><br><span class="line">* 所以获取其他值很难，只能从第一个开始往后循环去找，时间复杂度为O（n）</span><br><span class="line">* 但是插入跟删除异常方便，而且不用担心内存问题</span><br><span class="line">* */</span><br><span class="line"></span><br><span class="line">import java.nio.channels.Pipe;</span><br><span class="line"></span><br><span class="line">public class SingleLinkedList &#123;</span><br><span class="line">    public Node head;//head永远是第一个</span><br><span class="line">    public int usedSize;</span><br><span class="line"></span><br><span class="line">    //头插法</span><br><span class="line">    public void addFirst(int data)&#123;</span><br><span class="line">        Node node = new Node(data);//创建新节点</span><br><span class="line">        //注意理解我们这里是在什么对象的角度去进行操作的</span><br><span class="line">        if(this.head==null)&#123;//如果第一个节点是空的，复制给第一个节点</span><br><span class="line">            this.head = node;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            //如果第一个节点不空，执行标准化操作</span><br><span class="line">            node.next = this.head;//新节点的指针域指向旧节点</span><br><span class="line">            this.head = node;//现在我们是下一个操作对象的新节点</span><br><span class="line">        &#125;</span><br><span class="line">        //跟C的思路好像有点不同</span><br><span class="line">        //开始回忆，C是创建新节点，把新节点的指针域赋值为旧节点的指针域（换屁股），然后把就节点的指针域赋值为当前节点（头插进屁股里）</span><br><span class="line">        this.usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //为了节约时间直接把尾插法写在这里</span><br><span class="line">    //这个尾插法不存粹，不够快，好处是可以跟这个头插法的代码一起用</span><br><span class="line">    //原理是从第一个遍历到最后一个，然后再插入，比起存粹的尾插速度要慢很多，在数据大的时候</span><br><span class="line">    public void addLast(int data)&#123;</span><br><span class="line">        //创建新节点</span><br><span class="line">        Node node = new Node(data);</span><br><span class="line">        if(this.head == null)&#123;</span><br><span class="line">            this.head = node;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            Node cur = this.head;</span><br><span class="line">            while(cur.next!=null)&#123;</span><br><span class="line">                cur = cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        this.usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //打印单链表</span><br><span class="line">    public void myToString()&#123;</span><br><span class="line">        Node cur = this.head;//从第一个开始遍历</span><br><span class="line">        while(cur != null)&#123;</span><br><span class="line">            System.out.print(cur.value+&quot; &quot;);</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //单链表的查找</span><br><span class="line">    public boolean contains(int key)&#123;</span><br><span class="line">        Node cur = this.head;</span><br><span class="line">        while(cur!=null)&#123;</span><br><span class="line">            if(cur.value == key)&#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获取单链表的长度</span><br><span class="line">    public int length()&#123;</span><br><span class="line">        return this.usedSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //获得插入位置的前区节点</span><br><span class="line">    //为什么要获取前驱节点，因为我们只有通过前驱节点的指针域才能访问我们要的那个节点</span><br><span class="line">    public Node getIndex(int pos)&#123;</span><br><span class="line">        Node cur = this.head;</span><br><span class="line">        int index = 0;</span><br><span class="line">        while(index++ != pos-1)&#123;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        return cur;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //插入节点任意位置插入，第一个数据节点为0号下标</span><br><span class="line">    public void insert(int pos,int data)&#123;</span><br><span class="line">        if(pos&lt;0||pos&gt;this.usedSize)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;插入位置不合法&quot;);</span><br><span class="line">            //这是一条我没学过的代码，异常抛出？为啥不用return勒</span><br><span class="line">            //猜测，如果return，那么会接着执行主程序的吓一条代码，这里是直接结束程序</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(pos == 0)&#123;</span><br><span class="line">            addFirst(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(pos == this.usedSize)&#123;</span><br><span class="line">            addLast(data);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Node node = new Node(data);</span><br><span class="line">        Node prev = getIndex(pos);//获得插入位置的前驱节点</span><br><span class="line">        node.next = prev.next;</span><br><span class="line">        prev.next = node;</span><br><span class="line">        this.usedSize++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //清空链表</span><br><span class="line">    public void clear()&#123;</span><br><span class="line">        this.head = null;</span><br><span class="line">        //当head设置为null后，之后的节点对象都变成未被引用的对象，垃圾回收器会自动回收这些未被引用的对象</span><br><span class="line">        //C要创建两个指针，一个一个的释放内存一个储存当前位置，一个储存下一位置</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="个人理解"><a href="#个人理解" class="headerlink" title="个人理解"></a>个人理解</h3><p>单链表机构在有频繁插入跟删除元素的条件下表现非常优秀，时间复杂度仅为O(1)，但查找比较费时，而且用了多余的储存空间去储存了元素之间的逻辑结构，但是不用担心储存空间的分配，元素个数不被限制</p><p>需要理解的是，<strong>单链表结构的操作对象是当前的元素</strong>，类比和尚滚佛珠，还有插入删除操作的顺序一定不可以错</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剪刀石头布</title>
      <link href="/posts/18553.html"/>
      <url>/posts/18553.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="剪刀石头布"><a href="#剪刀石头布" class="headerlink" title="剪刀石头布"></a>剪刀石头布</h1><p>​跟我这种垃圾想出来的代码完全不一样，我的思路是用循环链表存储人类输入的数据然后根据根据人类前几次输入的结果去进行输出，如果前面出的布多，就增加出现剪刀的可能性，如果出现的石头多，就增加出现布的可能性</p><p>​不得不说，我的可能太低级了，只不过这确实是我的第一思路，但是老师的思路显然也有缺陷，太过死板，如果知道背后逻辑肯定可以100%取胜，不过对不知道的人的赢面还是不错的，<strong>他的代码，是通过判断人类下一步更可能出什么</strong>，就是人出了剪刀之后更可能会出什么，人出了石头之后更可能会出什么，人出了布之后更可能会出什么，虽然我们只需要统计数据计算然后让计算机去执行计算就可以，我们可以用九个变量去储存计算机的逻辑部分，分别统计人出拳之后再出拳的概率即可，但是老师的代码在数据结构的安排上显然“更有意思”</p><p>​<img src="/posts/18553/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221222005836.jpg"></p><p>​但是在知道数据库时，人在不出错并且知道底层逻辑的情况下依然可以完胜计算机（没错，就是我）</p><p>​我想，如果让我改进这个算法我会保留随机性，如果出剪刀之后出石头的可能性大，就增加出布的可能性，把二维数组换成由结构体组成的二维数组，一个储存次数（int），一个储存可能性（double），需要解决的问题是，如何根据可能性去生成计算机要出的结果（这个属于实现方面比较简单），还有一个是怎么去计算每次人出拳后计算机出拳的可能性，这个是数学问题，不太好想（人出拳的可能性是多少，那我下一局出布的可能性是多少？人出拳的概率对我下一回合出拳胜率的影响，似乎涉及到统计学跟概率学。。。。。。cao）</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package computer;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class text &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Scanner sc = new Scanner(System.in);</span><br><span class="line">        int memory[][] = new int[3][3];</span><br><span class="line">        int counter=0;//记录猜拳的回合数</span><br><span class="line">        int human;//记录人类本次出拳</span><br><span class="line">        int computer;//记录计算机出拳</span><br><span class="line">        int id;//记录人类上次出拳后，出拳次数最多的是那种</span><br><span class="line">        int max;//记录根据id推出的计算机出拳</span><br><span class="line">        int prev=0;//记录人类上一次出拳</span><br><span class="line"></span><br><span class="line">        while(true)&#123;</span><br><span class="line">            counter++;</span><br><span class="line">            System.out.printf(&quot;该你出拳了！请输入:0-石头；1-剪刀；2-布\n&quot;);</span><br><span class="line">            human= sc.nextInt();</span><br><span class="line">            if(human!=0&amp;&amp;human!=1&amp;&amp;human!=2)&#123;</span><br><span class="line">                System.out.println(&quot;输入不合法，请重新输入&quot;);</span><br><span class="line">                continue;</span><br><span class="line">            &#125;//输入012以外的数据退出循环</span><br><span class="line">            //此处代码可让学生优化，若非合理输入，用户循环实现合理输入为止</span><br><span class="line">            if(counter&lt;=12) &#123;//前十回合，计算机随机出拳，统计数据</span><br><span class="line">                computer = (int)(Math.random()*3);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                id=0;//我出剪刀的几率高</span><br><span class="line">                if(memory[prev][id]&lt;memory[prev][1])id=1;//我出石头的几率高</span><br><span class="line">                if(memory[prev][id]&lt;memory[prev][2])id=2;//我出布的几率高</span><br><span class="line">                if(id==0)max=2;//出布</span><br><span class="line">                else if(id==1)max=0;//出剪刀</span><br><span class="line">                else max=1;//出石头</span><br><span class="line">                computer=max;</span><br><span class="line">            &#125;</span><br><span class="line">            output(human,computer);//输出出拳信息和胜负信息</span><br><span class="line">            memory[prev][human]++;</span><br><span class="line">            for(int i=0;i&lt;3;i++)&#123;</span><br><span class="line">                for(int j=0;j&lt;3;j++)&#123;</span><br><span class="line">                    System.out.print(memory[i][j]+&quot; &quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">            prev=human;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void output(int human,int computer)&#123;</span><br><span class="line">        if(human==computer)&#123;</span><br><span class="line">            System.out.println(&quot;你和计算机本局打平啦！&quot;);</span><br><span class="line">            switch(human)&#123;</span><br><span class="line">                case 0:</span><br><span class="line">                System.out.println(&quot;你和计算机都出了石头！&quot;);break;</span><br><span class="line">                case 1:</span><br><span class="line">                System.out.println(&quot;你和计算机都出了剪刀！&quot;);break;</span><br><span class="line">                case 2:</span><br><span class="line">                System.out.println(&quot;你和计算机都出了布！&quot;);break;</span><br><span class="line">            &#125;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(human==0)//你出了石头，计算机不是石头</span><br><span class="line">        &#123;</span><br><span class="line">            if(computer==1)</span><br><span class="line">                System.out.printf(&quot;你赢啦!你的出拳是石头，计算机出拳是剪刀！\n&quot;);</span><br><span class="line">            else</span><br><span class="line">                System.out.printf(&quot;计算机赢啦！你的出拳是石头，计算机出拳是布！\n&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(human==1)//你出了剪刀，计算机不是剪刀</span><br><span class="line">        &#123;</span><br><span class="line">            if(computer==2)</span><br><span class="line">                System.out.printf(&quot;你赢啦!你的出拳是剪刀，计算机出拳是布！\n&quot;);</span><br><span class="line">            else</span><br><span class="line">                System.out.printf(&quot;计算机赢啦！你的出拳是剪刀，计算机出拳是石头！\n&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        if(human==2)//你出了布，计算机不是布</span><br><span class="line">        &#123;</span><br><span class="line">            if(computer==0)</span><br><span class="line">                System.out.printf(&quot;你赢啦!你的出拳是布，计算机出拳是石头！\n&quot;);</span><br><span class="line">            else</span><br><span class="line">                System.out.printf(&quot;计算机赢啦！你的出拳是布，计算机出拳是剪刀！\n&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 有趣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/46132.html"/>
      <url>/posts/46132.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式，是一种类型的<strong>设计模式</strong>，是一种<strong>创建型模式</strong>，提供了一种创建对象的方式</p><p>这种模式涉及到一个单一的类，<strong>该类负责创建自己的对象</strong>，同时<strong>确保只有单个对象被创建</strong>，这个类<strong>提供了一种访问其唯一对象的方式</strong>，可以直接访问，<strong>不需要实例化该类的对象</strong></p><p>注意</p><p>单例类只能有一个实例</p><p>单例类必须自己创建自己的唯一实例</p><p>单例类必须给其他所有对象提供这一实例</p><p>要保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><strong>主要解决</strong>：一个全局使用的类频繁的创建与销毁</p><p><strong>何时使用</strong>：当你想控制实例数目，节省系统资源的时候</p><p><strong>主要方法</strong>：判断系统是否已经有这个单例，如果有则返回，如果没有则创建</p><p><strong>关键代码</strong>：构造函数是私有的</p><p><strong>应用实例</strong>：</p><p>一个班级只有一个班主任</p><p>多线程程序操作一个文件的时候会不可避免的出现多个进程或者线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行</p><p>一些设备管理器常常设计为单例模式，比如一个电脑的两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件</p><p><strong>使用场景</strong>：</p><p>要求生产唯一的序列号</p><p>WEB中的技术器，不用每次刷新都在数据库里加一次，先用单例缓存起来</p><p>创建的一个对象需要消耗的资源过多，比如I&#x2F;O与数据库的连接</p><p><strong>优点</strong>：</p><p>内存里只有一个实例，减少内存的开销</p><p>避免对资源的多重占用</p><p>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们创建一个a类，a类有它的私有构造函数和本身的一个静态实例，a类提供了一个静态方法，供外界获取它的静态实例</p><p>&#96;&#96;&#x2F;&#x2F;创建一个Singleton类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SingleObject &#123;</span><br><span class="line">    //创建 SingleObject 的一个对象</span><br><span class="line">    private static SingleObject instance = new SingleObject();</span><br><span class="line">    //让构造函数为 private，这样该类就不会被实例化</span><br><span class="line">    private SingleObject()&#123;&#125;</span><br><span class="line">    //获取唯一可用的对象</span><br><span class="line">    public static SingleObject getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void showMessage()&#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SingletonPatternDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //不合法的构造函数</span><br><span class="line">        //编译时错误：构造函数 SingleObject() 是不可见的</span><br><span class="line">        //SingleObject object = new SingleObject();</span><br><span class="line">        //获取唯一可用的对象</span><br><span class="line">        SingleObject object = SingleObject.getInstance();            //显示消息</span><br><span class="line">        object.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过类中公有的静态方法调用该类的私有构造函数并返回该类从而达成只生成唯一可用对象的目的，并可通过该对象调用该类中的方法</p><h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><p>1.懒汉式，线程不安全</p><p><strong>是否lazy初始化</strong>：是</p><p><strong>是否多线程安全</strong>：否</p><p><strong>实现难度</strong>：易</p><p>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized所以严格意义上它并不算单例模式</p><p>这种方式lazy loading很明显，不要求多线程安全，在多线程不能正常工作</p><p>实例</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;//私有静态属性</span><br><span class="line">    private Singleton ()&#123;&#125;//私有构造方法</span><br><span class="line">    public static Singleton getInstance() &#123;//共有静态方法</span><br><span class="line">        if (instance == null) &#123;//如果没有就创建一个对象并返回</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;//返回现有对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.懒汉式，线程安全</p><p><strong>是否lazy初始化</strong>：是</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：易</p><p>描述：这种方式具备很好的lazy loading，能够在多线程中很好的工作，但是效率很低，99%情况下不需要同步，优点，第一次调用才初始化，避免内存浪费，缺点，必须加锁synchronized才能保证单例，但是加锁会影响效率，getlnstance()的性能对应用程序不是很关键（该方法使用不太频繁）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;//静态私有属性</span><br><span class="line">    private Singleton ()&#123;&#125;//私有构造方法</span><br><span class="line">    public static synchronized Singleton getInstance() &#123;//这一行的那个关键字我不懂</span><br><span class="line">        if (instance == null) &#123;//如果没有对象就创建一个并返回</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;//直接返回现有对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.饿汉式</p><p><strong>是否lazy初始化</strong>：否</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：易</p><p>描述：这种方式比较常用，但容易产生垃圾对象。</p><p>优点：没有加锁，执行效率会提高。</p><p>缺点：类加载时就初始化，浪费内存</p><p>它基于class loader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式种大多时调用getlnstance方法，但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading的效果</p><p>实例</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = new Singleton();//加载类是就进行初始化</span><br><span class="line">    private Singleton ()&#123;&#125;//私有构造方法</span><br><span class="line">    public static Singleton getInstance() &#123;静态共有方法，返回创建的对象</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…………………………………………这一段跟后面的一大段看不懂，不抄了，感觉够用了——目前</p><p>4.双检锁&#x2F;双重校验锁（DLC,即double-checked locking）</p><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>较复杂</p><p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p><p>………………………………………</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/posts/56455.html"/>
      <url>/posts/56455.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式，是<strong>围绕一个超级工厂创建其他工厂</strong>，该超级工厂又称为其他工厂的工厂，属于创建型模式</p><p>在抽象工厂模式中，<strong>接口是负责创建一个相关对象的工厂</strong>，不需要显示指定他们的类，每个工厂都能按照工厂模式提供对象</p><p>个人理解：抽象工厂模式可以使用一个工厂创造器根据传递的信息创造出实现了超级工厂的子类工厂，子类工厂再根据传递的信息生成具体的类</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：提供一个<strong>创建一系列相关或互相依赖对象的接口，而无需指定他们具体的类</strong></p><p><strong>主要解决</strong>：主要解决接口选择问题</p><p><strong>何时使用</strong>：在一个产品族里面，定义多个产品</p><p><strong>关键代码</strong>：在一个工厂里聚合多个同类产品</p><p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象</p><p><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品时，既要在抽象的creator中加代码，又要在具体的类里加代码</p><p><img src="/posts/56455/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221220170600.jpg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1.为形状创建一个接口</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Shape &#123;</span><br><span class="line">    //为形状创建的接口</span><br><span class="line">    void draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建实现接口的实体类</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;circle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Square implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;square&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Rectangle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;retangle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.为颜色创建一个接口</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Color &#123;</span><br><span class="line">    public abstract void fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.创建实现接口的实体类</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Blue implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;blue&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Red implements Color &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;red&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Green implements Color&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;green&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.为两个颜色和对象创建抽象类来获取工厂</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class AbstractFactory &#123;</span><br><span class="line">//其实这里是否抽象无所谓，但是你不希望别人直接创建超级工厂吧，没意义对不对</span><br><span class="line">    //为Color和Shape对象创建抽象类来获取工厂</span><br><span class="line">    public abstract Color getColor(String color);</span><br><span class="line">    public abstract Shape getShape(String shape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.创建抽象工厂类，急于给定信息生成实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ColorFactory extends AbstractFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Color getColor(String color) &#123;</span><br><span class="line">        if(color == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if(color.equalsIgnoreCase(&quot;RED&quot;))&#123;</span><br><span class="line">            return new Red();</span><br><span class="line">        &#125; else if(color.equalsIgnoreCase(&quot;GREEN&quot;))&#123;</span><br><span class="line">            return new Green();</span><br><span class="line">        &#125; else if(color.equalsIgnoreCase(&quot;BLUE&quot;))&#123;</span><br><span class="line">            return new Blue();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Shape getShape(String shape) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ShpeFactory extends AbstractFactory&#123;</span><br><span class="line">    //创建扩展超级工厂类的工厂类，基于给定信息生成实体类的对象</span><br><span class="line">    @Override</span><br><span class="line">    public Color getColor(String color) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Shape getShape(String shape) &#123;</span><br><span class="line">        if(shape == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;if(shape.equalsIgnoreCase(&quot;CIRCLE&quot;))&#123;</span><br><span class="line">            return new Circle();</span><br><span class="line">        &#125; else if(shape.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;</span><br><span class="line">            return new Rectangle();</span><br><span class="line">        &#125; else if(shape.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;</span><br><span class="line">            return new Square();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.创建一个工厂创造器&#x2F;生成器类，通过传递形状或颜色信息来获取工厂</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FactoryProducer &#123;</span><br><span class="line">    //根据传递的信息去生产超级工厂的子类</span><br><span class="line">    public static AbstractFactory getFactory(String choice)&#123;</span><br><span class="line">        if(choice.equalsIgnoreCase(&quot;SHAPE&quot;))&#123;</span><br><span class="line">            return new ShpeFactory();</span><br><span class="line">        &#125; else if(choice.equalsIgnoreCase(&quot;COLOR&quot;))&#123;</span><br><span class="line">            return new ColorFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.使用工厂创造器来获取抽象工厂，通过传递类型信息来获取实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class text &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //获取形状工厂</span><br><span class="line">        AbstractFactory shapeFactory = FactoryProducer.getFactory(&quot;SHAPE&quot;);</span><br><span class="line">        //超级工厂类型可以接收所有实现他的子类，这里使用FactoryProducer，根据传递的信息返回实现了超级工厂的子类，用超级工厂接收由工厂制造器返回的子类工厂</span><br><span class="line">        //获取形状为 Circle 的对象</span><br><span class="line">        Shape shape1 = shapeFactory.getShape(&quot;CIRCLE&quot;);</span><br><span class="line">//传递信息给子类工厂，获取相应对象</span><br><span class="line">        //调用 Circle 的 draw 方法</span><br><span class="line">        shape1.draw();</span><br><span class="line"></span><br><span class="line">        //获取形状为 Rectangle 的对象</span><br><span class="line">        Shape shape2 = shapeFactory.getShape(&quot;RECTANGLE&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Rectangle 的 draw 方法</span><br><span class="line">        shape2.draw();</span><br><span class="line"></span><br><span class="line">        //获取形状为 Square 的对象</span><br><span class="line">        Shape shape3 = shapeFactory.getShape(&quot;SQUARE&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Square 的 draw 方法</span><br><span class="line">        shape3.draw();</span><br><span class="line"></span><br><span class="line">        //获取颜色工厂</span><br><span class="line">        AbstractFactory colorFactory = FactoryProducer.getFactory(&quot;COLOR&quot;);</span><br><span class="line"></span><br><span class="line">        //获取颜色为 Red 的对象</span><br><span class="line">        Color color1 = colorFactory.getColor(&quot;RED&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Red 的 fill 方法</span><br><span class="line">        color1.fill();</span><br><span class="line"></span><br><span class="line">        //获取颜色为 Green 的对象</span><br><span class="line">        Color color2 = colorFactory.getColor(&quot;GREEN&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Green 的 fill 方法</span><br><span class="line">        color2.fill();</span><br><span class="line"></span><br><span class="line">        //获取颜色为 Blue 的对象</span><br><span class="line">        Color color3 = colorFactory.getColor(&quot;BLUE&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Blue 的 fill 方法</span><br><span class="line">        color3.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.输出结果</p><p><img src="/posts/56455/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221220170447.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>光看还是不行，要自己实际操作才能掌握其中细节</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/posts/6013.html"/>
      <url>/posts/6013.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式，属于创建型模式，提供了一种创建对象的方式</p><p>在工厂模式中，我们在创建对象是不会对客户端暴露创建模式逻辑，并且通过<strong>使用一个共同接口来指向新创建的对象</strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：定义一个创建对象的接口，<strong>让其子类自己决定实例化哪一个工厂类</strong>，工厂模式使其创建过程延迟到子类进行</p><p><strong>主要解决</strong>：接口的选择问题</p><p><strong>如何解决</strong>：让其子类实现工厂接口，返回的也是一个抽象的产品</p><p><strong>关键代码</strong>：创建过程在其子类执行</p><p><strong>优点</strong>：1.知道名字就可以创建对象2.扩展性高，向增加一个产品，只要增加一个工厂类就可以3.屏蔽产品的具体实现，调用者只关心产品的接口</p><p><strong>缺点</strong>：1.每次增加产品，都需要增加一个具体类和对象的实现工厂，使系统中的类成倍增加，一定程度上增加了系统的复杂度，同时也增加了系统对具体类的依赖</p><p><strong>注意事项</strong>：作为一种创建类的模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式，负载的对象适合使用工厂模式，而简单的对象只需要使用new即可，会增加系统的复杂度</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>将创建一个pizz接口，和实现pizz接口的实体类，下一步是定义工厂类pizzafactory ，text类使用该工厂来获取pizza对象，text将向工厂传递信息，以便获取它所需对象的类型</p><p><img src="/posts/6013/image-20221214144758004.png" alt="类图"></p><p>1.创建一个接口</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Pizza &#123;</span><br><span class="line">    public abstract void prepare();</span><br><span class="line">    public abstract void bake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建实现接口的实体类</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ChessePizza implements Pizza&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void prepare() &#123;</span><br><span class="line">        System.out.println(&quot;准备面饼\n准备奶酪&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void bake() &#123;</span><br><span class="line">        System.out.println(&quot;烤奶酪披萨\n20分钟后可以使用 奶酪披萨&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FruitPizza implements Pizza&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void prepare() &#123;</span><br><span class="line">        System.out.println(&quot;准备面饼\n准备水果&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void bake() &#123;</span><br><span class="line">        System.out.println(&quot;烤水果披萨\n20分钟后可以使用 水果披萨&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建一个工厂，生成基于给定信息的实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PizzaFactory &#123;</span><br><span class="line">    public Pizza creat(String type)&#123;</span><br><span class="line">        if(type.equals(&quot;水果披萨&quot;))&#123;</span><br><span class="line">            return new ChessePizza();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return new FruitPizza();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用该工厂，通过传递类型信息来获取实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PizzaFactory &#123;</span><br><span class="line">    public Pizza creat(String type)&#123;</span><br><span class="line">        if(type.equals(&quot;水果披萨&quot;))&#123;</span><br><span class="line">            return new ChessePizza();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return new FruitPizza();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子数组和</title>
      <link href="/posts/60313.html"/>
      <url>/posts/60313.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/posts/60313/20221219131354.jpg"></p><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><p>施工中</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>施工中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deemo</title>
      <link href="/posts/42771.html"/>
      <url>/posts/42771.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>top_img: <img src="/posts/42771/deemo.jpg"></p><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><p><img src="/posts/42771/deemo.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
