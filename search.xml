<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>单例模式</title>
      <link href="/posts/46132.html"/>
      <url>/posts/46132.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>单例模式，是一种类型的<strong>设计模式</strong>，是一种<strong>创建型模式</strong>，提供了一种创建对象的方式</p><p>这种模式涉及到一个单一的类，<strong>该类负责创建自己的对象</strong>，同时<strong>确保只有单个对象被创建</strong>，这个类<strong>提供了一种访问其唯一对象的方式</strong>，可以直接访问，<strong>不需要实例化该类的对象</strong></p><p>注意</p><p>单例类只能有一个实例</p><p>单例类必须自己创建自己的唯一实例</p><p>单例类必须给其他所有对象提供这一实例</p><p>要保证一个类仅有一个实例，并提供一个访问它的全局访问点</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><strong>主要解决</strong>：一个全局使用的类频繁的创建与销毁</p><p><strong>何时使用</strong>：当你想控制实例数目，节省系统资源的时候</p><p><strong>主要方法</strong>：判断系统是否已经有这个单例，如果有则返回，如果没有则创建</p><p><strong>关键代码</strong>：构造函数是私有的</p><p><strong>应用实例</strong>：</p><p>一个班级只有一个班主任</p><p>多线程程序操作一个文件的时候会不可避免的出现多个进程或者线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行</p><p>一些设备管理器常常设计为单例模式，比如一个电脑的两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件</p><p><strong>使用场景</strong>：</p><p>要求生产唯一的序列号</p><p>WEB中的技术器，不用每次刷新都在数据库里加一次，先用单例缓存起来</p><p>创建的一个对象需要消耗的资源过多，比如I&#x2F;O与数据库的连接</p><p><strong>优点</strong>：</p><p>内存里只有一个实例，减少内存的开销</p><p>避免对资源的多重占用</p><p>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>我们创建一个a类，a类有它的私有构造函数和本身的一个静态实例，a类提供了一个静态方法，供外界获取它的静态实例</p><p>&#96;&#96;&#x2F;&#x2F;创建一个Singleton类</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SingleObject &#123;</span><br><span class="line">    //创建 SingleObject 的一个对象</span><br><span class="line">    private static SingleObject instance = new SingleObject();</span><br><span class="line">    //让构造函数为 private，这样该类就不会被实例化</span><br><span class="line">    private SingleObject()&#123;&#125;</span><br><span class="line">    //获取唯一可用的对象</span><br><span class="line">    public static SingleObject getInstance()&#123;</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">    public void showMessage()&#123;</span><br><span class="line">        System.out.println(&quot;Hello World!&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class SingletonPatternDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //不合法的构造函数</span><br><span class="line">        //编译时错误：构造函数 SingleObject() 是不可见的</span><br><span class="line">        //SingleObject object = new SingleObject();</span><br><span class="line">        //获取唯一可用的对象</span><br><span class="line">        SingleObject object = SingleObject.getInstance();            //显示消息</span><br><span class="line">        object.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过类中公有的静态方法调用该类的私有构造函数并返回该类从而达成只生成唯一可用对象的目的，并可通过该对象调用该类中的方法</p><h2 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h2><p>1.懒汉式，线程不安全</p><p><strong>是否lazy初始化</strong>：是</p><p><strong>是否多线程安全</strong>：否</p><p><strong>实现难度</strong>：易</p><p>描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁synchronized所以严格意义上它并不算单例模式</p><p>这种方式lazy loading很明显，不要求多线程安全，在多线程不能正常工作</p><p>实例</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;//私有静态属性</span><br><span class="line">    private Singleton ()&#123;&#125;//私有构造方法</span><br><span class="line">    public static Singleton getInstance() &#123;//共有静态方法</span><br><span class="line">        if (instance == null) &#123;//如果没有就创建一个对象并返回</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;//返回现有对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.懒汉式，线程安全</p><p><strong>是否lazy初始化</strong>：是</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：易</p><p>描述：这种方式具备很好的lazy loading，能够在多线程中很好的工作，但是效率很低，99%情况下不需要同步，优点，第一次调用才初始化，避免内存浪费，缺点，必须加锁synchronized才能保证单例，但是加锁会影响效率，getlnstance()的性能对应用程序不是很关键（该方法使用不太频繁）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance;//静态私有属性</span><br><span class="line">    private Singleton ()&#123;&#125;//私有构造方法</span><br><span class="line">    public static synchronized Singleton getInstance() &#123;//这一行的那个关键字我不懂</span><br><span class="line">        if (instance == null) &#123;//如果没有对象就创建一个并返回</span><br><span class="line">            instance = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return instance;//直接返回现有对象</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.饿汉式</p><p><strong>是否lazy初始化</strong>：否</p><p><strong>是否多线程安全</strong>：是</p><p><strong>实现难度</strong>：易</p><p>描述：这种方式比较常用，但容易产生垃圾对象。</p><p>优点：没有加锁，执行效率会提高。</p><p>缺点：类加载时就初始化，浪费内存</p><p>它基于class loader机制避免了多线程的同步问题，不过，instance在类装载时就实例化，虽然导致类装载的原因有很多种，在单例模式种大多时调用getlnstance方法，但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，这时候初始化instance显然没有达到lazy loading的效果</p><p>实例</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    private static Singleton instance = new Singleton();//加载类是就进行初始化</span><br><span class="line">    private Singleton ()&#123;&#125;//私有构造方法</span><br><span class="line">    public static Singleton getInstance() &#123;静态共有方法，返回创建的对象</span><br><span class="line">        return instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>…………………………………………这一段跟后面的一大段看不懂，不抄了，感觉够用了——目前</p><p>4.双检锁&#x2F;双重校验锁（DLC,即double-checked locking）</p><p><strong>JDK 版本：</strong>JDK1.5 起</p><p><strong>是否 Lazy 初始化：</strong>是</p><p><strong>是否多线程安全：</strong>是</p><p><strong>实现难度：</strong>较复杂</p><p><strong>描述：</strong>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。<br>getInstance() 的性能对应用程序很关键。</p><p>………………………………………</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/posts/56455.html"/>
      <url>/posts/56455.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h1><p>抽象工厂模式，是<strong>围绕一个超级工厂创建其他工厂</strong>，该超级工厂又称为其他工厂的工厂，属于创建型模式</p><p>在抽象工厂模式中，<strong>接口是负责创建一个相关对象的工厂</strong>，不需要显示指定他们的类，每个工厂都能按照工厂模式提供对象</p><p>个人理解：抽象工厂模式可以使用一个工厂创造器根据传递的信息创造出实现了超级工厂的子类工厂，子类工厂再根据传递的信息生成具体的类</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：提供一个<strong>创建一系列相关或互相依赖对象的接口，而无需指定他们具体的类</strong></p><p><strong>主要解决</strong>：主要解决接口选择问题</p><p><strong>何时使用</strong>：在一个产品族里面，定义多个产品</p><p><strong>关键代码</strong>：在一个工厂里聚合多个同类产品</p><p><strong>优点</strong>：当一个产品族中的多个对象被设计成一起工作时，他能保证客户端始终只使用同一个产品族中的对象</p><p><strong>缺点</strong>：产品族扩展非常困难，要增加一个系列的某一产品时，既要在抽象的creator中加代码，又要在具体的类里加代码</p><p><img src="/posts/56455/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221220170600.jpg"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1.为形状创建一个接口</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Shape &#123;</span><br><span class="line">    //为形状创建的接口</span><br><span class="line">    void draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建实现接口的实体类</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Circle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;circle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Square implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;square&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Rectangle implements Shape&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void draw() &#123;</span><br><span class="line">        System.out.println(&quot;retangle&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.为颜色创建一个接口</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Color &#123;</span><br><span class="line">    public abstract void fill();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.创建实现接口的实体类</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Blue implements Color&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;blue&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Red implements Color &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;red&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Green implements Color&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void fill() &#123;</span><br><span class="line">        System.out.println(&quot;green&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.为两个颜色和对象创建抽象类来获取工厂</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public abstract class AbstractFactory &#123;</span><br><span class="line">//其实这里是否抽象无所谓，但是你不希望别人直接创建超级工厂吧，没意义对不对</span><br><span class="line">    //为Color和Shape对象创建抽象类来获取工厂</span><br><span class="line">    public abstract Color getColor(String color);</span><br><span class="line">    public abstract Shape getShape(String shape);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.创建抽象工厂类，急于给定信息生成实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ColorFactory extends AbstractFactory&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Color getColor(String color) &#123;</span><br><span class="line">        if(color == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        if(color.equalsIgnoreCase(&quot;RED&quot;))&#123;</span><br><span class="line">            return new Red();</span><br><span class="line">        &#125; else if(color.equalsIgnoreCase(&quot;GREEN&quot;))&#123;</span><br><span class="line">            return new Green();</span><br><span class="line">        &#125; else if(color.equalsIgnoreCase(&quot;BLUE&quot;))&#123;</span><br><span class="line">            return new Blue();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Shape getShape(String shape) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ShpeFactory extends AbstractFactory&#123;</span><br><span class="line">    //创建扩展超级工厂类的工厂类，基于给定信息生成实体类的对象</span><br><span class="line">    @Override</span><br><span class="line">    public Color getColor(String color) &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Shape getShape(String shape) &#123;</span><br><span class="line">        if(shape == null)&#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;if(shape.equalsIgnoreCase(&quot;CIRCLE&quot;))&#123;</span><br><span class="line">            return new Circle();</span><br><span class="line">        &#125; else if(shape.equalsIgnoreCase(&quot;RECTANGLE&quot;))&#123;</span><br><span class="line">            return new Rectangle();</span><br><span class="line">        &#125; else if(shape.equalsIgnoreCase(&quot;SQUARE&quot;))&#123;</span><br><span class="line">            return new Square();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.创建一个工厂创造器&#x2F;生成器类，通过传递形状或颜色信息来获取工厂</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FactoryProducer &#123;</span><br><span class="line">    //根据传递的信息去生产超级工厂的子类</span><br><span class="line">    public static AbstractFactory getFactory(String choice)&#123;</span><br><span class="line">        if(choice.equalsIgnoreCase(&quot;SHAPE&quot;))&#123;</span><br><span class="line">            return new ShpeFactory();</span><br><span class="line">        &#125; else if(choice.equalsIgnoreCase(&quot;COLOR&quot;))&#123;</span><br><span class="line">            return new ColorFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.使用工厂创造器来获取抽象工厂，通过传递类型信息来获取实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class text &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        //获取形状工厂</span><br><span class="line">        AbstractFactory shapeFactory = FactoryProducer.getFactory(&quot;SHAPE&quot;);</span><br><span class="line">        //超级工厂类型可以接收所有实现他的子类，这里使用FactoryProducer，根据传递的信息返回实现了超级工厂的子类，用超级工厂接收由工厂制造器返回的子类工厂</span><br><span class="line">        //获取形状为 Circle 的对象</span><br><span class="line">        Shape shape1 = shapeFactory.getShape(&quot;CIRCLE&quot;);</span><br><span class="line">//传递信息给子类工厂，获取相应对象</span><br><span class="line">        //调用 Circle 的 draw 方法</span><br><span class="line">        shape1.draw();</span><br><span class="line"></span><br><span class="line">        //获取形状为 Rectangle 的对象</span><br><span class="line">        Shape shape2 = shapeFactory.getShape(&quot;RECTANGLE&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Rectangle 的 draw 方法</span><br><span class="line">        shape2.draw();</span><br><span class="line"></span><br><span class="line">        //获取形状为 Square 的对象</span><br><span class="line">        Shape shape3 = shapeFactory.getShape(&quot;SQUARE&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Square 的 draw 方法</span><br><span class="line">        shape3.draw();</span><br><span class="line"></span><br><span class="line">        //获取颜色工厂</span><br><span class="line">        AbstractFactory colorFactory = FactoryProducer.getFactory(&quot;COLOR&quot;);</span><br><span class="line"></span><br><span class="line">        //获取颜色为 Red 的对象</span><br><span class="line">        Color color1 = colorFactory.getColor(&quot;RED&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Red 的 fill 方法</span><br><span class="line">        color1.fill();</span><br><span class="line"></span><br><span class="line">        //获取颜色为 Green 的对象</span><br><span class="line">        Color color2 = colorFactory.getColor(&quot;GREEN&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Green 的 fill 方法</span><br><span class="line">        color2.fill();</span><br><span class="line"></span><br><span class="line">        //获取颜色为 Blue 的对象</span><br><span class="line">        Color color3 = colorFactory.getColor(&quot;BLUE&quot;);</span><br><span class="line"></span><br><span class="line">        //调用 Blue 的 fill 方法</span><br><span class="line">        color3.fill();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.输出结果</p><p><img src="/posts/56455/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20221220170447.jpg"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>光看还是不行，要自己实际操作才能掌握其中细节</p>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/posts/6013.html"/>
      <url>/posts/6013.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><p>工厂模式，属于创建型模式，提供了一种创建对象的方式</p><p>在工厂模式中，我们在创建对象是不会对客户端暴露创建模式逻辑，并且通过<strong>使用一个共同接口来指向新创建的对象</strong></p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图</strong>：定义一个创建对象的接口，<strong>让其子类自己决定实例化哪一个工厂类</strong>，工厂模式使其创建过程延迟到子类进行</p><p><strong>主要解决</strong>：接口的选择问题</p><p><strong>如何解决</strong>：让其子类实现工厂接口，返回的也是一个抽象的产品</p><p><strong>关键代码</strong>：创建过程在其子类执行</p><p><strong>优点</strong>：1.知道名字就可以创建对象2.扩展性高，向增加一个产品，只要增加一个工厂类就可以3.屏蔽产品的具体实现，调用者只关心产品的接口</p><p><strong>缺点</strong>：1.每次增加产品，都需要增加一个具体类和对象的实现工厂，使系统中的类成倍增加，一定程度上增加了系统的复杂度，同时也增加了系统对具体类的依赖</p><p><strong>注意事项</strong>：作为一种创建类的模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式，负载的对象适合使用工厂模式，而简单的对象只需要使用new即可，会增加系统的复杂度</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>将创建一个pizz接口，和实现pizz接口的实体类，下一步是定义工厂类pizzafactory ，text类使用该工厂来获取pizza对象，text将向工厂传递信息，以便获取它所需对象的类型</p><p><img src="/posts/6013/image-20221214144758004.png" alt="类图"></p><p>1.创建一个接口</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public interface Pizza &#123;</span><br><span class="line">    public abstract void prepare();</span><br><span class="line">    public abstract void bake();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建实现接口的实体类</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class ChessePizza implements Pizza&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void prepare() &#123;</span><br><span class="line">        System.out.println(&quot;准备面饼\n准备奶酪&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void bake() &#123;</span><br><span class="line">        System.out.println(&quot;烤奶酪披萨\n20分钟后可以使用 奶酪披萨&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class FruitPizza implements Pizza&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void prepare() &#123;</span><br><span class="line">        System.out.println(&quot;准备面饼\n准备水果&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void bake() &#123;</span><br><span class="line">        System.out.println(&quot;烤水果披萨\n20分钟后可以使用 水果披萨&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建一个工厂，生成基于给定信息的实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PizzaFactory &#123;</span><br><span class="line">    public Pizza creat(String type)&#123;</span><br><span class="line">        if(type.equals(&quot;水果披萨&quot;))&#123;</span><br><span class="line">            return new ChessePizza();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return new FruitPizza();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.使用该工厂，通过传递类型信息来获取实体类的对象</p><p>&#96;&#96;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class PizzaFactory &#123;</span><br><span class="line">    public Pizza creat(String type)&#123;</span><br><span class="line">        if(type.equals(&quot;水果披萨&quot;))&#123;</span><br><span class="line">            return new ChessePizza();</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return new FruitPizza();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子数组和</title>
      <link href="/posts/60313.html"/>
      <url>/posts/60313.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><img src="/posts/60313/20221219131354.jpg"></p><h2 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h2><p>施工中</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>施工中</p>]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deemo</title>
      <link href="/posts/42771.html"/>
      <url>/posts/42771.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>top_img: <img src="/posts/42771/deemo.jpg"></p><h1 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h1><p><img src="/posts/42771/deemo.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
